const fs=require('fs');const s=fs.readFileSync('src/App.jsx','utf8');const stack=[];const pairs={'(':')','{':'}','[':']'};const open=Object.keys(pairs);const close=Object.values(pairs);let inStr=null;let inComment=null;let line=1;for(let i=0;i<s.length;i++){const ch=s[i];const next=s[i+1];if(inComment){ if(inComment==='//' && ch==='\n'){ inComment=null; line++; continue;} if(inComment==='/*' && ch==='*' && next==='/'){ inComment=null; i++; continue;} if(ch==='\n') line++; continue;} if(!inStr && ch==='/' && next==='/' ){ inComment='//'; i++; continue;} if(!inStr && ch==='/' && next==='*'){ inComment='/*'; i++; continue;} if(inStr){ if(ch==='\\' && next){ i++; continue;} if(ch===inStr) inStr=null; if(ch==='\n') line++; continue;} if(ch==="'"||ch==='"'||ch==='`'){ inStr=ch; continue;} if(open.includes(ch)){ stack.push({ch,line,pos:i}); } else if(close.includes(ch)){ const last=stack.pop(); if(!last){ console.log('Unmatched close',ch,'at',line); process.exit(1);} const expected=pairs[last.ch]; if(expected!==ch){ console.log('Mismatched',last.ch,'expected',expected,'got',ch,'at line',line); process.exit(1);} } if(ch==='\n') line++; } if(stack.length){ console.log('Unclosed opens, first:',stack[0]); process.exit(1);} console.log('Brackets balanced');
